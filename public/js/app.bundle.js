!(function (e) { var t = {}; function n (r) { if (t[r]) return t[r].exports; var o = t[r] = { i: r, l: !1, exports: {} }; return e[r].call(o.exports, o, o.exports, n), o.l = !0, o.exports }n.m = e, n.c = t, n.d = function (e, t, r) { n.o(e, t) || Object.defineProperty(e, t, { enumerable: !0, get: r }) }, n.r = function (e) { typeof Symbol !== 'undefined' && Symbol.toStringTag && Object.defineProperty(e, Symbol.toStringTag, { value: 'Module' }), Object.defineProperty(e, '__esModule', { value: !0 }) }, n.t = function (e, t) { if (1 & t && (e = n(e)), 8 & t) return e; if (4 & t && typeof e === 'object' && e && e.__esModule) return e; var r = Object.create(null); if (n.r(r), Object.defineProperty(r, 'default', { enumerable: !0, value: e }), 2 & t && typeof e !== 'string') for (var o in e)n.d(r, o, function (t) { return e[t] }.bind(null, o)); return r }, n.n = function (e) { var t = e && e.__esModule ? function () { return e.default } : function () { return e }; return n.d(t, 'a', t), t }, n.o = function (e, t) { return Object.prototype.hasOwnProperty.call(e, t) }, n.p = '', n(n.s = 2) }([function (e, t) { const n = e => { var t = Math.floor(e / 60); var n = e % 60; return mStr = t >= 10 ? t : '0' + t, sStr = n >= 10 ? n : '0' + n, mStr + ':' + sStr }; e.exports.getClock = (e, t) => { var r = document.createElement('div'); r.classList.add('clock'); var o = 60 * min; r.innerHTML = n(o); var a = setInterval(() => { o -= 1, r.innerHTML = n(o), o <= 0 && (clearInterval(a), t()) }, 1e3); return r }, e.exports.setAttributes = (e, t) => { for (let n in t)e.setAttribute(n, t[n]) } }, function (e, t) { e.exports.seeSelf = !1, e.exports.minPerRound = 6, e.exports.numOfIdeas = 3, e.exports.maxVote = 3 }, function (e, t, n) { window.onload = n(3) }, function (e, t, n) { const r = n(4); const o = n(5); e.exports = () => { var e = document.getElementById('app'); e.setAttribute('data-state', 'login'), e.innerHTML = '\n    <form autocomplete="off">\n      <label>Enter Name</label><br>\n      <input type="text" name="name"><br>\n      <input type="submit" value="Connect">\n    </form>\n  '; var t = e.querySelector('form'); var n = t.querySelector('input[name="name"]'); t.onsubmit = () => { var e = new WebSocket(r.socketUrl, ['json']); return e.username = n.value, e.onopen = () => { e.send(JSON.stringify({ name: e.username, type: 'register', message: `Register name request (${e.username})` })) }, e.onclose = () => { console.log('closing websocket connection') }, e.onmessage = o, window.onbeforeunload = () => { e.close() }, e.addEventListener('ping', () => { console.log('pinged by server') }), !1 } } }, function (e, t) { var n = window.location.protocol === 'https:' ? 'wss:' : 'ws:'; var r = `${n}//${window.location.hostname}:80`; e.exports = { socketProtocol: n, socketUrl: r } }, function (e, t, n) { const { viewRoom: r, setUsers: o } = n(6); const a = n(7); const s = n(8); const i = n(9); const d = n(10); e.exports = e => { var t = JSON.parse(e.data); var n = e.srcElement; console.log(t); var u = document.getElementById('app'); var l = u.getAttribute('data-state'); if (['login', 'roundOne', 'roundTwo'].includes(l))u.setAttribute('data-state', 'room'), r(t.users, n); else if (l === 'room') { if (['newUser', 'readyStateChange', 'userDisconnect'].includes(t.type))o(t.users); else if (t.type === 'countDown')u.querySelector('p').innerHTML = `Round Starting in ${t.timeLeft} seconds...`; else if (t.type === 'countDownStop')u.querySelector('p').innerHTML = 'Round will start when everyone is ready'; else if (t.type === 'roundStart') switch (t.roundNum) { case 1:u.setAttribute('data-state', 'roundOne'), a(n); break; case 2:u.setAttribute('data-state', 'roundTwo'), s(t.data, n); break; case 3:u.setAttribute('data-state', 'roundVote'), i(t.data, n) } } else l === 'roundVote' && (u.setAttribute('data-state', 'result'), d(t.data), n.close()) } }, function (e, t) { const n = e => { var t = document.getElementById('app').querySelector('.connected'); t.innerHTML = ''; for (let n in e) if (e.hasOwnProperty(n)) { let r = document.createElement('div'); r.innerHTML = n, e[n] || r.classList.add('unready'), t.appendChild(r) } }; e.exports.viewRoom = (e, t) => { var r = document.getElementById('app'); r.innerHTML = '\n  <h2>Connected</h2>\n  <div class="connected"></div>\n  <p>Round will start when everyone is ready</p>\n  <form><input type="submit" value="Ready"></form>\n  ', n(e); var o = r.querySelector('form'); var a = o.querySelector('input[type="submit"]'); o.onsubmit = () => (a.value === 'Ready' ? (t.send(JSON.stringify({ name: t.username, type: 'ready', message: 'Ready for round start' })), a.value = 'Unready', a.classList.add('unready')) : (t.send(JSON.stringify({ name: t.username, type: 'unready', message: 'Unready for round start' })), a.value = 'Ready', a.classList.remove('unready')), !1), a.focus() }, e.exports.setUsers = n }, function (e, t, n) { const { getClock: r } = n(0); const { minPerRound: o, numOfIdeas: a } = n(1); e.exports = e => { var t = document.getElementById('app'); t.innerHTML = `\n  <p>\n  Please put down ${a} ideas before time runs out.<br>\n  If you have more than ${a} ideas, pick the ${a} best ones ðŸ˜ƒ\n  </p>\n  <form autocomplete="off"></form>\n  `; var n = t.querySelector('form'); for (let e = 1; e < a + 1; e++)n.innerHTML += `\n    <label>Idea ${e}</label><input type="text" name="idea-${e}"><br>\n    `; t.prepend(r(o, () => { let t = n.querySelectorAll('input[name^=idea]'); e.send(JSON.stringify({ name: e.username, type: 'submission', message: 'Submitted form for round 1', roundNum: 1, data: Array.from(t).map((t, n) => ({ ideaId: `${e.username.substring(0, 3)}-${n}`, idea: t.value })) })) })) } }, function (e, t, n) { const { getClock: r, setAttributes: o } = n(0); const { minPerRound: a, numOfIdeas: s } = n(1); e.exports = (e, t) => { var n = document.getElementById('app'); n.innerHTML = '\n  <p>\n  In this round, you can only work off of ideas from round 1.<br>\n  Click on the small box, and select an idea from the list that inspired you,\n  then type your new idea in the second input box.\n  </p>\n  <form autocomplete="off">\n    <div class="idea-list-container"><ul></ul></div>\n    <div class="new-idea-container"></div>\n  </form>\n  '; let i = n.querySelector('.idea-list-container ul'); Object.keys(e).forEach(n => { for (let r in e[n].roundOneIdeas) if (seeSelf || t.username !== n) { let t = document.createElement('li'); o(t, { 'data-id': e[n].roundOneIdeas[r].ideaId, 'data-raw': e[n].roundOneIdeas[r].idea, tabindex: 0 }), t.innerHTML = `<strong>${t.getAttribute('data-id')}</strong>: ${t.getAttribute('data-raw')}`, i.appendChild(t) } }); var d = ''; for (let e = 1; e < s + 1; e++)d += [`<label>Idea ${e}</label>`, `<input type="text" name="origin-${e}" size="1">`, `<input type="text" name="idea-${e}" disabled><br>`].join(''); n.querySelector('.new-idea-container').innerHTML = d, n.querySelectorAll('input[name^=origin]').forEach(e => { e.addEventListener('focus', e => { e.target.classList.add('highlight'), i.classList.add('highlight'), Array.from(i.children).forEach(e => { e.classList.add('cursor-ptr') }) }), e.addEventListener('blur', e => { if (e.target.classList.remove('highlight'), i.classList.remove('highlight'), e.relatedTarget && e.relatedTarget.hasAttribute('data-id')) { e.target.value = e.relatedTarget.getAttribute('data-id'), e.target.classList.add('selected'); let t = +e.target.getAttribute('name').replace('origin-', ''); Array.from(i.children).forEach(e => { e.classList.remove('cursor-ptr') }); let n = document.querySelector(`input[name=idea-${t}]`); n.disabled = !1, n.focus() } }) }), n.prepend(r(a, () => { let e = []; for (let n = 1; n < s + 1; n++) { let r = document.querySelector(`input[name=origin-${n}]`); let o = document.querySelector(`input[name=idea-${n}]`); let a = document.querySelector(`li[data-id="${r.value}"]`); e.push({ originId: r.value, origin: a !== null ? a.getAttribute('data-raw') : '', ideaId: `${r.value}-${t.username.substring(0, 3)}-${n}`, idea: o.value }) }t.send(JSON.stringify({ name: t.username, type: 'submission', message: 'Submitted form for round 2', roundNum: 2, data: e })) })) } }, function (e, t, n) { const { getClock: r, setAttributes: o } = n(0); const { minPerRound: a, numOfIdeas: s } = n(1); e.exports = (e, t) => { var n = document.getElementById('app'); n.innerHTML = `\n  <p>\n  This is the voting round, you will vote for ideas that were generated only in the second round,\n  You can only cast ${maxVote} votes.\n  </p>\n  <form autocomplete="off">\n    <div class="vote-list-container"><ul></ul></div>\n  </form>\n  `; let s = {}; let i = []; let d = n.querySelector('.vote-list-container ul'); Object.keys(e).forEach(n => { for (let r in e[n].roundTwoIdeas) if (seeSelf || t.username !== n) { let t = document.createElement('li'); t.classList.add('cursor-ptr'), o(t, { 'data-id': e[n].roundTwoIdeas[r].ideaId, 'data-raw': e[n].roundTwoIdeas[r].idea, tabindex: 0 }), t.innerHTML = `\n        <strong>${t.getAttribute('data-raw')}</strong><br>\n        <em>(inspired by "${e[n].roundTwoIdeas[r].origin}")</em>\n        `, s[t.getAttribute('data-id')] = !1; const a = e => { let t = e.target.getAttribute('data-id'); if (e.target.classList.contains('selected'))e.target.classList.remove('selected'), s[t] = !1, i.splice(i.indexOf(t), 1); else if (e.target.classList.add('selected'), s[t] = !0, i.push(t), i.length > maxVote) { let e = i.shift(); document.querySelector(`li[data-id="${e}"]`).classList.remove('selected'), s[e] = !1 } }; t.addEventListener('click', a), t.addEventListener('keyup', e => { e.keyCode === 13 && a(e) }), d.appendChild(t) } }), n.prepend(r(a, n, () => { t.send(JSON.stringify({ name: t.username, type: 'submission', message: 'Submitted form for vote round', roundNum: 3, data: s })) })) } }, function (e, t) { e.exports = e => { document.getElementById('app').innerHTML = 'SHOW ME THE DATA', console.log(e) } }]))
